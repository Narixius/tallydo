{"version":3,"sources":["store/todo/actions.ts","store/todo/index.ts","store/index.ts","components/logo.tsx","components/TodoAdder/Dates.tsx","components/TodoAdder/index.tsx","components/TodoList/TodoItem.tsx","components/TodoList/TodoGroup.tsx","components/TodoList/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UpdateTodo","todo","type","payload","Todo","title","description","dueDate","id","isCompleted","this","baseId","v","rootState","combineReducers","todos","state","action","filter","item","getId","Logo","className","size","Dates","onDateChange","React","useState","selectedDate","setSelectedDate","showCalendar","setShowCalendar","customDate","setCustomDate","generateClassName","fieldName","defaultClass","onClick","undefined","Date","dayjs","add","toDate","format","numberOfMonths","onDayClick","e","mapDispatchToProps","AddTodo","connect","titleInput","createRef","value","setValue","addTodoHandler","current","ref","placeholder","onChange","target","onKeyUp","key","date","TodoItem","onTodoCheck","todoCheckBoxClassName","todoTitleClassName","isChecked","getTitle","extend","customParseFormat","isToday","isTomorrow","groups","keys","sortBy","Object","clonedGroups","zipObject","map","todoCheckedHandler","setChecked","FunctionalTodoItem","forwardRef","props","staggerDurationBy","duration","appearAnimation","enterAnimation","leaveAnimation","groupName","d","year","parseGroupName","groupBy","getDueDate","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.948196e6.chunk.js","sourcesContent":["import {Todo} from \"./index\"\r\n\r\ninterface IAction {\r\n\ttype: string\r\n}\r\n\r\nexport const ADD = 'ADD';\r\ninterface IAddTodo extends IAction {\r\n  type: typeof ADD;\r\n  payload: Todo;\r\n}\r\n\r\nexport function AddTodo(todo: Todo): IAddTodo {\r\n  return {\r\n    type: ADD,\r\n    payload: todo,\r\n  };\r\n}\r\n\r\nexport const UPDATE = 'UPDATE';\r\ninterface IUpdateTodo extends IAction {\r\n  type: typeof UPDATE;\r\n  payload: Todo;\r\n}\r\n\r\nexport function UpdateTodo(todo: Todo): IUpdateTodo {\r\n  return {\r\n    type: UPDATE,\r\n    payload: todo,\r\n  };\r\n}\r\n\r\nexport type TodoActions = IAddTodo | IUpdateTodo;\r\n","import { ADD,TodoActions, UPDATE } from './actions';\r\n\r\nexport class Todo {\r\n\tprivate static baseId:number = 0;\r\n\tprivate readonly id:number;\r\n\tprivate isCompleted:boolean;\r\n\tconstructor(private title:string, private description: string, private dueDate: Date){\r\n\t\tthis.id = ++Todo.baseId;\r\n\t\tthis.isCompleted = false\r\n\t}\r\n\tpublic getTitle():string{\r\n\t\treturn this.title;\r\n\t}\r\n\tpublic getId():number{\r\n\t\treturn this.id\r\n\t}\r\n\tpublic isChecked():boolean{\r\n\t\treturn this.isCompleted\r\n\t}\r\n\tpublic setChecked(v:boolean):void{\r\n\t\tthis.isCompleted = v;\r\n\t}\r\n\tpublic getDueDate():Date{\r\n\t\treturn this.dueDate;\r\n\t}\r\n}\r\n\r\nexport type TodoArray = Todo[];\r\n\r\nexport function todoReducer(\r\n  state: TodoArray = [],\r\n  action: TodoActions\r\n): TodoArray {\r\n  switch (action.type) {\r\n    case ADD:\r\n\t  return [...state, action.payload];\r\n\tcase UPDATE:\r\n\t\treturn state.filter((item) =>{\r\n\t\t\tif(item.getId() === action.payload.getId()){\r\n\t\t\t\titem = action.payload\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {combineReducers} from 'redux'\r\nimport {todoReducer} from \"./todo\"\r\n\r\nexport const rootState = combineReducers({\r\n\ttodos: todoReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootState>;\r\n","import { CheckCircleOutline } from 'heroicons-react'\r\nimport React from 'react'\r\nimport './logo.css'\r\n\r\nfunction Logo() {\r\n    return (\r\n        <h1 className=\"font-bold text-2xl tracking-normal text-white\">\r\n            Tallyd\r\n            <CheckCircleOutline size={20} className=\"inline-block\" />\r\n        </h1>\r\n    )\r\n}\r\nexport default Logo\r\n","import React from 'react'\r\nimport { CalendarOutline } from 'heroicons-react'\r\nimport dayjs from 'dayjs'\r\nimport 'react-dates/initialize'\r\nimport 'react-dates/lib/css/_datepicker.css'\r\nimport './Dates.css'\r\nimport { DayPicker } from 'react-dates'\r\nimport { spawn } from 'child_process'\r\n\r\nfunction Dates({ onDateChange }: { onDateChange(date: Date): void }) {\r\n    const [selectedDate, setSelectedDate] = React.useState('today')\r\n    const [showCalendar, setShowCalendar] = React.useState(false)\r\n    const [customDate, setCustomDate] = React.useState<Date>()\r\n\r\n    function generateClassName(fieldName: string) {\r\n        let defaultClass =\r\n            'dateTag rounded-md text-sm text-white font-bold px-3 py-1 mr-3 opacity-25 cursor-pointer'\r\n        if (fieldName == selectedDate) return defaultClass + ' active'\r\n        else return defaultClass\r\n    }\r\n    return (\r\n        <div>\r\n            <span className=\"text-white block p-2 pl-0 font-bold text-sm\">\r\n                Due Date\r\n            </span>\r\n            <div className=\"flex\">\r\n                <div\r\n                    className={generateClassName('today') + ' bg-red-500'}\r\n                    onClick={() => {\r\n                        setSelectedDate('today')\r\n                        setCustomDate(undefined)\r\n                        onDateChange(new Date())\r\n                    }}\r\n                >\r\n                    <span>Today</span>\r\n                </div>\r\n                <div\r\n                    className={generateClassName('tomorrow') + ' bg-indigo-500'}\r\n                    onClick={() => {\r\n                        setSelectedDate('tomorrow')\r\n                        setCustomDate(undefined)\r\n                        onDateChange(dayjs().add(1, 'day').toDate())\r\n                    }}\r\n                >\r\n                    <span>Tomorrow</span>\r\n                </div>\r\n                <div\r\n                    className={\r\n                        generateClassName('customDate') + ' bg-yellow-600 flex'\r\n                    }\r\n                    onClick={() => {\r\n                        setSelectedDate('customDate')\r\n                        setShowCalendar(true)\r\n                    }}\r\n                >\r\n                    <CalendarOutline size={19} />\r\n                    {customDate && (\r\n                        <span className=\"ml-1\">\r\n                            {dayjs(customDate).format('DD-MM-YYYY')}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {showCalendar && (\r\n                <div className=\"relative mt-1 calendar\">\r\n                    <div className=\"calendar -mt-32 absolute w-full flex justify-center items-center\">\r\n                        <DayPicker\r\n                            numberOfMonths={1}\r\n                            onDayClick={(e) => {\r\n                                setSelectedDate('customDate')\r\n                                setCustomDate(e.toDate())\r\n                                onDateChange(e.toDate())\r\n                                setShowCalendar(false)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dates\r\n","import { ArrowNarrowRight } from 'heroicons-react'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Todo } from '../../store/todo'\r\nimport { AddTodo } from '../../store/todo/actions'\r\nimport Logo from '../logo'\r\nimport Dates from './Dates'\r\n\r\nconst mapDispatchToProps = { AddTodo }\r\n\r\ntype Props = {\r\n    AddTodo: typeof AddTodo\r\n}\r\nlet selectedDate = new Date()\r\n\r\nfunction TodoAdder({ AddTodo }: Props) {\r\n    const titleInput = React.createRef<HTMLInputElement>()\r\n    const [value, setValue] = React.useState('')\r\n    // function randomDate(start: Date, end: Date) {\r\n    //     return new Date(\r\n    //         start.getTime() + Math.random() * (end.getTime() - start.getTime())\r\n    //     )\r\n    // }\r\n    // randomDate(new Date(2020, 11, 15), new Date())\r\n\r\n    const addTodoHandler = (): void => {\r\n        AddTodo(new Todo(value, '', selectedDate))\r\n        setValue('')\r\n        titleInput.current!.value = ''\r\n    }\r\n\r\n    const onTodoTitleChanged = (\r\n        e: React.ChangeEvent<HTMLInputElement>\r\n    ): void => {\r\n        setValue(e.target.value)\r\n    }\r\n    const onTodoTitleKeyUp = (\r\n        e: React.KeyboardEvent<HTMLInputElement>\r\n    ): void => {\r\n        if (e.key === 'Enter') {\r\n            addTodoHandler()\r\n        }\r\n    }\r\n    const onDateChange = (date: Date): void => {\r\n        selectedDate = date\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-5 md:w-1/2 relative\">\r\n            <Logo />\r\n            <h2 className=\"text-3xl font-bold text-white lg:mt-10 mt-5\">\r\n                What’s you plan to do?\r\n            </h2>\r\n            <p className=\"text-gray-500 font-medium text-sm lg:mt-2 mt-1\">\r\n                Add you plan, so you never forget the works!\r\n            </p>\r\n            <div className=\"inputfields mt-8\">\r\n                <input\r\n                    ref={titleInput}\r\n                    type=\"text\"\r\n                    className=\"px-4 py-3 rounded-md font bg-white bg-opacity-25 text-gray-100 w-full focus:outline-none placeholder-gray-400\"\r\n                    placeholder=\"Shopping...?!\"\r\n                    onChange={onTodoTitleChanged}\r\n                    onKeyUp={onTodoTitleKeyUp}\r\n                />\r\n                <div className=\"flex flex-row-reverse w-full mt-4\">\r\n                    <button\r\n                        onClick={addTodoHandler}\r\n                        className=\"add font-medium flex text-gray-800 px-3 py-1 rounded-md bg-white focus:outline-none\"\r\n                    >\r\n                        Add\r\n                        <ArrowNarrowRight />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Dates onDateChange={onDateChange} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(TodoAdder)\r\n","import { Check } from 'heroicons-react'\r\nimport React from 'react'\r\nimport { Todo } from '../../store/todo/index'\r\nimport './TodoItem.css'\r\n\r\nfunction TodoItem({\r\n    todo,\r\n    onTodoCheck,\r\n}: {\r\n    todo: Todo\r\n    onTodoCheck(t: Todo): void\r\n}) {\r\n    let className =\r\n        'todo-item mb-2 text-black-blue p-2 rounded-md flex items-center select-none  cursor-pointer bg-active-todo'\r\n\r\n    let todoCheckBoxClassName = 'circle border-2 rounded-full w-5 h-5 bg-whtie'\r\n\r\n    let todoTitleClassName = 'ml-2 font-medium'\r\n    if (todo.isChecked()) {\r\n        className += ' bg-opacity-25 done-todo opacity-75'\r\n        todoCheckBoxClassName += ' border-green-400 text-green-400'\r\n        todoTitleClassName += ' text-green-400 line-through'\r\n    } else {\r\n        todoCheckBoxClassName += '  border-black-blue'\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onClick={() => {\r\n                onTodoCheck(todo)\r\n            }}\r\n            className={className}\r\n        >\r\n            <div className={todoCheckBoxClassName}>\r\n                {todo.isChecked() && <Check size={14} />}\r\n            </div>\r\n            <span className={todoTitleClassName}>{todo.getTitle()}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { forwardRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { UpdateTodo } from '../../store/todo/actions'\r\nimport { Todo } from '../../store/todo/index'\r\nimport TodoItem from './TodoItem'\r\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\r\nimport isToday from 'dayjs/plugin/isToday'\r\nimport isTomorrow from 'dayjs/plugin/isTomorrow'\r\nimport dayjs from 'dayjs'\r\nimport { sortBy, zipObject } from 'lodash'\r\nimport FlipMove from 'react-flip-move'\r\n\r\ndayjs.extend(customParseFormat)\r\ndayjs.extend(isToday)\r\ndayjs.extend(isTomorrow)\r\nconst mapStateToProps = null\r\n\r\nconst mapDispatchToProps = { UpdateTodo }\r\n\r\ntype todoGroups = {\r\n    [key: string]: Todo[]\r\n}\r\n\r\ntype Props = {\r\n    UpdateTodo: typeof UpdateTodo\r\n    groups: todoGroups\r\n}\r\n\r\nfunction TodoGroup({ groups, UpdateTodo }: Props) {\r\n    // sort object keys by date\r\n    var keys = sortBy(Object.keys(groups), (key) => {\r\n        return dayjs(key, 'DD-MM-YYYY').toDate()\r\n    })\r\n\r\n    // remake object with sorted keys\r\n    let clonedGroups = zipObject(\r\n        keys,\r\n        keys.map((item) => groups[item])\r\n    )\r\n    groups = clonedGroups\r\n\r\n    // sort by alphabet\r\n    Object.keys(groups).map((key) => {\r\n        groups[key] = sortBy(groups[key], (item) => {\r\n            return item.getTitle()\r\n        })\r\n    })\r\n\r\n    // Sort by done/undone todos\r\n    Object.keys(groups).map((key) => {\r\n        groups[key] = sortBy(groups[key], (item) => {\r\n            return item.isChecked()\r\n        })\r\n    })\r\n\r\n    const todoCheckedHandler = (item: Todo): void => {\r\n        let v: boolean = true\r\n        if (item.isChecked()) {\r\n            v = false\r\n        }\r\n        item.setChecked(v)\r\n\r\n        UpdateTodo(item)\r\n    }\r\n    type ppp = {\r\n        todo: Todo\r\n        onTodoCheck(t: Todo): void\r\n    }\r\n    const FunctionalTodoItem = forwardRef((props: ppp, ref: any) => (\r\n        <div ref={ref}>\r\n            <TodoItem onTodoCheck={props.onTodoCheck} todo={props.todo} />\r\n        </div>\r\n    ))\r\n\r\n    const groupTodos = (todos: Todo[]) => {\r\n        return todos.map((item) => {\r\n            return (\r\n                <FunctionalTodoItem\r\n                    onTodoCheck={todoCheckedHandler}\r\n                    todo={item}\r\n                    key={item.getId()}\r\n                />\r\n            )\r\n        })\r\n    }\r\n    const parseGroupName = (groupName: string): string => {\r\n        const d = dayjs(groupName, 'DD-MM-YYYY')\r\n\r\n        if (d.isToday()) return 'Today'\r\n        if (d.isTomorrow()) return 'Tomorrow'\r\n        if (d.year() === dayjs().year()) return d.format('ddd, D MMM')\r\n        else return d.format('ddd, D MMM, YYYY')\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-groups\">\r\n            <FlipMove\r\n                staggerDurationBy=\"30\"\r\n                duration={200}\r\n                appearAnimation=\"accordionVertical\"\r\n                enterAnimation=\"accordionVertical\"\r\n                leaveAnimation=\"accordionVertical\"\r\n            >\r\n                {Object.keys(groups).map((groupName: string) => {\r\n                    return (\r\n                        <div className=\"todoGroup mb-10\" key={groupName}>\r\n                            <span className=\"mb-2 block font-bold\">\r\n                                {parseGroupName(groupName)}\r\n                            </span>\r\n                            <FlipMove\r\n                                staggerDurationBy=\"30\"\r\n                                duration={200}\r\n                                appearAnimation=\"accordionVertical\"\r\n                                enterAnimation=\"accordionVertical\"\r\n                                leaveAnimation=\"accordionVertical\"\r\n                            >\r\n                                {groupTodos(groups[groupName])}\r\n                            </FlipMove>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoGroup)\r\n","import { groupBy } from 'lodash'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { RootState } from '../../store'\r\nimport { Todo, TodoArray } from '../../store/todo'\r\nimport { UpdateTodo } from '../../store/todo/actions'\r\nimport TodoGroup from './TodoGroup'\r\nimport dayjs from 'dayjs'\r\n\r\nconst mapStateToProps = ({ todos }: RootState) => {\r\n    return { todos }\r\n}\r\n\r\nconst mapDispatchToProps = { UpdateTodo }\r\n\r\ntype Props = {\r\n    todos: TodoArray\r\n}\r\n\r\nfunction TodoList({ todos }: Props) {\r\n    const groups = groupBy(todos, (todo: Todo) =>\r\n        dayjs(todo.getDueDate()).format('DD-MM-YYYY')\r\n    )\r\n\r\n    return (\r\n        <div className=\"md:w-1/2\">\r\n            <div className=\" h-full p-5\">\r\n                <div className=\" rounded-2xl p-10 h-full bg-white\">\r\n                    <h2 className=\"text-black-blue font-bold text-2xl\">\r\n                        Timeline\r\n                    </h2>\r\n                    <p className=\"mt-2 text-gray-500 text-sm\">\r\n                        “It's time to start living the life you've imagined”\r\n                        <span className=\"text-xs\">- Henry James</span>\r\n                    </p>\r\n                    <div className=\"list mt-5\">\r\n                        <TodoGroup groups={groups} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList)\r\n","import React from 'react'\r\nimport './App.css'\r\nimport TodoAdder from './components/TodoAdder'\r\nimport TodoList from './components/TodoList'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App md:flex bg-black-blue h-full md:justify-between\">\r\n            <TodoAdder />\r\n            <TodoList />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport reactDom from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { compose, createStore } from 'redux'\r\nimport { rootState } from './store'\r\nimport App from './App'\r\nimport './index.css'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nconst composeEnhancers =\r\n    ((window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n        (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) ||\r\n    compose\r\n\r\nconst store = createStore(rootState, composeEnhancers)\r\n\r\nreactDom.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}